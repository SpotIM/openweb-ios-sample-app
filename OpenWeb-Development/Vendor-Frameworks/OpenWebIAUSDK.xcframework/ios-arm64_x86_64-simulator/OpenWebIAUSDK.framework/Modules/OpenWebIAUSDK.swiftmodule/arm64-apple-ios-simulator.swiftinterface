// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OpenWebIAUSDK
import AdPlayerSDK
import AdSupport
import AppHarbrSDK
import AppTrackingTransparency
import Combine
import CryptoKit
import Foundation
import GoogleMobileAds
import KmmSpotimStandaloneAd
import NimbusRenderStaticKit
import OpenWrapHandlerDFP
import OpenWrapSDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public let sdkVersionName: Swift.String
public struct OWIAUAnalyticAdditionalInfo : OpenWebIAUSDK.OWIAUAnalyticAdditionalInfoProtocol {
  public var customBIData: OpenWebIAUSDK.OWIAUCustomBIData
  public init(customBIData: OpenWebIAUSDK.OWIAUCustomBIData = [:])
}
public class OWIAUAdSettings : OpenWebIAUSDK.OWIAUAdSettingsProtocol {
  public var configuration: OpenWebIAUSDK.OWIAUAdConfiguration
  public init(configuration: OpenWebIAUSDK.OWIAUAdConfiguration)
  @objc deinit
}
public struct OWIAUSettings : OpenWebIAUSDK.OWIAUSettingsProtocol {
  public var storeURL: Swift.String?
  public init(storeURL: Swift.String? = nil)
}
public struct OWIAUSettingsBuilder {
  public var storeURL: Swift.String?
  public init(storeURL: Swift.String? = nil)
  @discardableResult
  public mutating func storeURL(_ storeURL: Swift.String?) -> OpenWebIAUSDK.OWIAUSettingsBuilder
  public func build() -> any OpenWebIAUSDK.OWIAUSettingsProtocol
}
public enum OWIAUMpvType {
  case mpv
  case mpv2
  public static func == (a: OpenWebIAUSDK.OWIAUMpvType, b: OpenWebIAUSDK.OWIAUMpvType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OWIAURequestMethod : Swift.String {
  case delete
  case get
  case patch
  case post
  case put
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OWIAUAdConfiguration {
  case server(remote: OpenWebIAUSDK.OWIAURemoteAdsStrategy)
}
public enum OWIAUBIAnalyticEvent : Swift.String {
  case generalSdkLoaded
  case generalCampaignConfigsFetched
  case generalEngineMonetizationLoad
  case generalMonetizedPageView
  case generalMonetizedPageViewDelayed
  case dfpEngineWillInitialize
  case dfpSlotRequested
  case dfpEmpty
  case dfpImpressionViewable
  case dfpSlotResponseReceived
  case dfpSlotOnLoad
  case dfpSlotRenderEnded
  case dfpInitialLoadDisabled
  case aniviewEngineWillInitialize
  case aniviewAdClickThroughVideo
  case aniviewEngineDone
  case aniviewEngineClosed
  case aniviewAdInventoryVideo
  case aniviewContentClicked
  case aniviewContentCompleted
  case aniviewContentImpression
  case aniviewEngineError
  case aniviewEngineImpression
  case aniviewEngineInitializeError
  case aniviewEngineInitialized
  case aniviewImpressionViewable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OWIAUError : Swift.Error {
  case missingSpotId
  case castingError(description: Swift.String)
  case missingStoreURL
}
public enum OWIAURemoteAdsStrategy {
  case tmsServer(index: Swift.Int)
}
public enum OWIAUViewActionCallbackType {
  case adSizeChanged(UIKit.UIView, CoreFoundation.CGSize)
}
public enum OWIAUViewEventCallbackType {
  case video(OpenWebIAUSDK.OWIAUViewEventCallbackVideoType)
  case display(OpenWebIAUSDK.OWIAUViewEventCallbackDisplayType)
  public var description: Swift.String {
    get
  }
}
public enum OWIAUViewEventCallbackVideoType {
  case adServerCalled
  case inventory
  case viewableImpression
  case sourceLoaded
  case impression
  case progress(_: OpenWebIAUSDK.OWIAUVideoProgress)
  case fullScreenToggleRequested
  case movedToFullscreen
  case movedFromFullscreen
  case clickThrough
  case skippableStateChange
  case adPaused
  case closed
  case error(_: Swift.String)
  case generic(_: Swift.String)
  public var description: Swift.String {
    get
  }
}
public enum OWIAUViewEventCallbackDisplayType {
  case inventory
  case sourceLoaded
  case error(_: Swift.String)
  case impression
  case viewableImpression
  case clickThrough
  case closed
  public var description: Swift.String {
    get
  }
}
public enum OWIAUVideoProgress {
  case started
  case firstQuartile
  case midpoint
  case thirdQuartile
  case complete
  public var description: Swift.String {
    get
  }
  public static func == (a: OpenWebIAUSDK.OWIAUVideoProgress, b: OpenWebIAUSDK.OWIAUVideoProgress) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OWIAUViewSourceType {
  case ad
  public static func == (a: OpenWebIAUSDK.OWIAUViewSourceType, b: OpenWebIAUSDK.OWIAUViewSourceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol OWIAUAdSettingsProtocol {
  var configuration: OpenWebIAUSDK.OWIAUAdConfiguration { get }
}
public protocol OWIAUAnalyticAdditionalInfoProtocol {
  var customBIData: OpenWebIAUSDK.OWIAUCustomBIData { get }
}
public protocol OWIAUAnalytics {
  var customBIData: OpenWebIAUSDK.OWIAUCustomBIData { get set }
  func addBICallback(_ callback: @escaping OpenWebIAUSDK.OWIAUAnalyticEventCallback)
}
public protocol OWIAUGdprProtocol {
  func setGdprRequired(required: Swift.Bool)
  func setGdprConsent(consent: Swift.String)
}
public protocol OWIAUHelpers {
  var isNimbusAvailable: Swift.Bool { get }
  var gdpr: any OpenWebIAUSDK.OWIAUGdprProtocol { get }
}
public protocol OWIAUManagerProtocol {
  var spotId: OpenWebIAUSDK.OWIAUSpotId { get set }
  var ui: any OpenWebIAUSDK.OWIAUUI { get }
  var analytics: any OpenWebIAUSDK.OWIAUAnalytics { get }
  var settings: any OpenWebIAUSDK.OWIAUSettingsProtocol { get set }
  var helpers: any OpenWebIAUSDK.OWIAUHelpers { get }
}
public protocol OWIAUSettingsProtocol {
  var storeURL: Swift.String? { get }
}
public protocol OWIAUUI {
  func ad(postId: OpenWebIAUSDK.OWIAUPostId, settings: any OpenWebIAUSDK.OWIAUAdSettingsProtocol, viewEventCallbacks: OpenWebIAUSDK.OWIAUAdViewEventsCallbacks?, actionsCallbacks: OpenWebIAUSDK.OWIAUAdViewActionsCallbacks?, completion: @escaping OpenWebIAUSDK.OWIAUViewCompletion)
}
public typealias OWIAUAnalyticEventCallback = (_ event: OpenWebIAUSDK.OWIAUBIAnalyticEvent, _ additionalInfo: any OpenWebIAUSDK.OWIAUAnalyticAdditionalInfoProtocol, _ postId: OpenWebIAUSDK.OWIAUPostId?) -> Swift.Void
public typealias OWIAUCustomBIData = [Swift.String : any Swift.Decodable & Swift.Encodable]
public typealias OWIAUDefaultCompletion = (Swift.Result<Swift.Void, OpenWebIAUSDK.OWIAUError>) -> Swift.Void
public typealias OWIAUSpotId = Swift.String
public typealias OWIAUPostId = Swift.String
public typealias OWIAUAdViewActionsCallbacks = (OpenWebIAUSDK.OWIAUViewActionCallbackType, OpenWebIAUSDK.OWIAUViewSourceType, OpenWebIAUSDK.OWIAUPostId) -> Swift.Void
public typealias OWIAUViewCompletion = (Swift.Result<UIKit.UIView, OpenWebIAUSDK.OWIAUError>) -> Swift.Void
public typealias OWIAUAdViewEventsCallbacks = (OpenWebIAUSDK.OWIAUViewEventCallbackType, OpenWebIAUSDK.OWIAUViewSourceType, OpenWebIAUSDK.OWIAUPostId) -> Swift.Void
@_hasMissingDesignatedInitializers public class OpenWebIAU {
  public static let manager: any OpenWebIAUSDK.OWIAUManagerProtocol
  @objc deinit
}
public enum OWIAULogLevel {
  case none, error, medium, verbose
  public static func == (a: OpenWebIAUSDK.OWIAULogLevel, b: OpenWebIAUSDK.OWIAULogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OWIAULogMethod : Swift.Hashable {
  case nsLog, osLog
  public static func == (a: OpenWebIAUSDK.OWIAULogMethod, b: OpenWebIAUSDK.OWIAULogMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class OWIAUCodableHelper {
  @objc deinit
}
public struct OWIAUThrowable<T> : Swift.Decodable where T : Swift.Decodable {
  public let result: Swift.Result<T, any Swift.Error>
  public init(from decoder: any Swift.Decoder) throws
}
extension OpenWebIAUSDK.OWIAUMpvType : Swift.Equatable {}
extension OpenWebIAUSDK.OWIAUMpvType : Swift.Hashable {}
extension OpenWebIAUSDK.OWIAURequestMethod : Swift.Equatable {}
extension OpenWebIAUSDK.OWIAURequestMethod : Swift.Hashable {}
extension OpenWebIAUSDK.OWIAURequestMethod : Swift.RawRepresentable {}
extension OpenWebIAUSDK.OWIAUBIAnalyticEvent : Swift.Equatable {}
extension OpenWebIAUSDK.OWIAUBIAnalyticEvent : Swift.Hashable {}
extension OpenWebIAUSDK.OWIAUBIAnalyticEvent : Swift.RawRepresentable {}
extension OpenWebIAUSDK.OWIAUVideoProgress : Swift.Equatable {}
extension OpenWebIAUSDK.OWIAUVideoProgress : Swift.Hashable {}
extension OpenWebIAUSDK.OWIAUViewSourceType : Swift.Equatable {}
extension OpenWebIAUSDK.OWIAUViewSourceType : Swift.Hashable {}
extension OpenWebIAUSDK.OWIAULogLevel : Swift.Equatable {}
extension OpenWebIAUSDK.OWIAULogLevel : Swift.Hashable {}
