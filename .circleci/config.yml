# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/

version: 2.1

parameters:
  run-nightly-s3:
    type: boolean
    default: false

references:
  # Docker image configurations
  ios_config_xcode: &ios_config_xcode
    resource_class: macos.m1.large.gen1
    parameters:
      xcode:
        type: string
      buildConfig:
        type: string
        default: "ReleaseInternal"
    macos:
      xcode: << parameters.xcode >>
    working_directory: ~/project/OpenWeb-Development

  define_var_release_version: &define_var_release_version
    run:
      name: Export new version number to environment variable
      command: |
        echo "export RELEASE_VERSION=$(cut -d '/' -f3 \<<< $CIRCLE_BRANCH)" \>> $BASH_ENV
        echo $RELEASE_VERSION

  define_var_core_version: &define_var_core_version
    run:
      name: Export core version number to environment variable
      command: |
        echo "export CORE_VERSION=$(cut -d '/' -f4 \<<< $CIRCLE_BRANCH)" \>> $BASH_ENV
        echo $CORE_VERSION

  define_var_s3_upload_path: &define_var_s3_upload_path
    run:
      name: Export new version number to environment variable
      command: |
        echo "export S3_UPLOAD_PATH=$(cut -d '/' -f2- \<<< $CIRCLE_BRANCH)" \>> $BASH_ENV
        echo $S3_UPLOAD_PATH

  define: &xcode_latest_official_version "15.2.0"

commands:
  swiftlint:
    steps:
      - run:
          name: Install Homebrew
          command: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      - run:
          name: Install SwiftLint
          command: |
            brew update
            brew install swiftlint
            swiftlint version

      - run:
          name: Run SwiftLint
          command: |
            swiftlint lint --strict --config swiftlint/.swiftlint.yml --reporter xcode || (echo "SwiftLint check failed." && exit 1)
            echo "SwiftLint check succeeded."

  prepare_release_app:
    steps:
      - checkout:
          path: ~/project

      - *define_var_release_version

      - run:
          name: start release app
          command: |
            echo "Start release app version: $RELEASE_VERSION"
            pwd
            ls -l

      - run:
          name: Configure Apple Key
          command: |
            sed -i '' -e "s/@@@@/${APPLE_KEY}/g" apple_api_key.json

      - restore_cache:
          key: bundler_cache_{{ checksum "Gemfile.lock" }}

      - restore_cache:
          key: bundler_cache_tamBiFKNEwk5ZF1vK4zAgATUGFUqItRwE1YYO8v9szM=

      - run:
          name: Bundle Install
          command: |
            bundle config set --local path 'vendor/bundle'
            bundle install
            bundle info fastlane

      - save_cache:
          key: bundler_cache_{{ checksum "Gemfile.lock" }}
          paths:
            - "vendor/bundle"

      - swiftlint

      - run:
          name: Installing Rosetta 2 if needed
          command: |
            if [ "$(uname -m)" = "arm64" ]; then
                /usr/sbin/softwareupdate --install-rosetta --agree-to-license
            else
                echo "Rosetta 2 can only be installed on Apple Silicon!"
            fi

orbs:
  aws-s3: circleci/aws-s3@3.0.0
  slack: circleci/slack@3.4.2
  codecov: codecov/codecov@3.2.2

jobs:
  run-nightly-s3_job:
    <<: *ios_config_xcode
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Building both .ipa and .app files to Amazon s3
          command: |
            bash -x ./scripts/building_ipa_and_app_files_amazon_s3.sh

  validate_spm_job:
    <<: *ios_config_xcode
    steps:
      - checkout:
          path: ~/project

      - *define_var_core_version

      - run:
          name: Clone SPM integration repo
          command: |
            mkdir spm-integration
            cd spm-integration
            git clone https://github.com/SpotIM/iOS-SDK-Test-SPM-Integration.git
            ls -l

      - run:
          name: Change xcode project SpotIM SPM version to the branch validate version requested and commit
          command: |
            cd spm-integration/iOS-SDK-Test-SPM-Integration
            ls -l
            git config --global user.name "ios-dev"
            git config --global user.email "ios-dev@openweb.com"
            git branch validate/spm/sdk/$CORE_VERSION
            git checkout validate/spm/sdk/$CORE_VERSION
            git status
            sed -i '' "s/\branch = .*/branch = $CORE_VERSION;/" OpenWeb-iOS-SDK-Demo.xcodeproj/project.pbxproj
            git add .
            git commit -m "validate spm with version '$CORE_VERSION'"

      - run:
          name: Bundle Install
          command: |
            cd spm-integration/iOS-SDK-Test-SPM-Integration
            bundle config set --local path 'vendor/bundle'
            bundle install
            bundle info fastlane

      - run:
          name: Build app
          no_output_timeout: 30m
          command: |
            cd spm-integration/iOS-SDK-Test-SPM-Integration
            bundle update fastlane
            bundle exec fastlane build

      - run:
          name: Create a pull request on Github for validating cocoapods integration
          command: |
            cd spm-integration/iOS-SDK-Test-SPM-Integration
            git push origin validate/spm/sdk/$CORE_VERSION

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: fastlane
      - store_artifacts:
          path: fastlane
          destination: scan-output

  validate_cocoapods_job:
    <<: *ios_config_xcode
    steps:
      - checkout:
          path: ~/project

      - *define_var_core_version

      - run:
          name: Clone cocoapods integration repo
          command: |
            mkdir cocoapods-integration
            cd cocoapods-integration
            git clone https://github.com/SpotIM/iOS-SDK-Test-Cocoapods-Integration.git
            ls -l

      - run:
          name: Change podfile SpotIM version to the branch validate version requested and commit
          command: |
            cd cocoapods-integration/iOS-SDK-Test-Cocoapods-Integration
            ls -l
            git config --global user.name "ios-dev"
            git config --global user.email "ios-dev@openweb.com"
            git branch validate/cocoapods/sdk/$CORE_VERSION
            git checkout validate/cocoapods/sdk/$CORE_VERSION
            git status
            sed -i '' "s/\pod 'SpotIMCore'.*/pod 'SpotIMCore', '$CORE_VERSION'/" Podfile
            git add .
            git commit -m "validate cocoapods with version '$CORE_VERSION'"

      - run:
          name: Pod install
          command: |
            cd cocoapods-integration/iOS-SDK-Test-Cocoapods-Integration
            pod install

      - run:
          name: Bundle Install
          no_output_timeout: 30m
          command: |
            cd cocoapods-integration/iOS-SDK-Test-Cocoapods-Integration
            bundle config set --local path 'vendor/bundle'
            bundle install
            bundle info fastlane

      - run:
          name: Build app
          command: |
            cd cocoapods-integration/iOS-SDK-Test-Cocoapods-Integration
            bundle update fastlane
            bundle exec fastlane build

      - run:
          name: Create a pull request on Github for validating cocoapods integration
          command: |
            cd cocoapods-integration/iOS-SDK-Test-Cocoapods-Integration
            git push origin validate/cocoapods/sdk/$CORE_VERSION

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: fastlane
      - store_artifacts:
          path: fastlane
          destination: scan-output

  default_job:
    <<: *ios_config_xcode
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Bash
          command: |
            pwd
            ls -l
      - run:
          name: start default build
          command: |
            echo "Start deafult build"
            pwd
            ls -l

      - restore_cache:
          key: bundler_cache_{{ checksum "Gemfile.lock" }}

      - restore_cache:
          key: bundler_cache_tamBiFKNEwk5ZF1vK4zAgATUGFUqItRwE1YYO8v9szM=

      - run:
          name: Bundle Install
          command: |
            bundle config set --local path 'vendor/bundle'
            bundle install
            bundle info fastlane

      - save_cache:
          key: bundler_cache_{{ checksum "Gemfile.lock" }}
          paths:
            - "vendor/bundle"

      - swiftlint

      - run:
          name: Build app and run unit-tests
          command: |
            bundle exec fastlane unit_tests

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output

  release_sdk_job:
    <<: *ios_config_xcode
    steps:
      - checkout:
          path: ~/project

      - *define_var_release_version

      - run:
          name: start release build
          command: |
            echo "Start release build $RELEASE_VERSION"
            pwd
            ls -l

      - restore_cache:
          key: bundler_cache_{{ checksum "Gemfile.lock" }}

      - restore_cache:
          key: bundler_cache_tamBiFKNEwk5ZF1vK4zAgATUGFUqItRwE1YYO8v9szM=

      - run:
          name: Bundle Install
          command: |
            bundle config set --local path 'vendor/bundle'
            bundle install
            bundle info fastlane

      - save_cache:
          key: bundler_cache_{{ checksum "Gemfile.lock" }}
          paths:
            - "vendor/bundle"

      - run:
          name: Before Running Fastlane Release
          command: |
            git status

      - run:
          name: Run Fastlane Release
          command: |
            bundle exec fastlane build_release_sdk version:$RELEASE_VERSION configuration:<< parameters.buildConfig >>

      - swiftlint

      - run:
          name: After Running Fastlane Release
          command: |
            ls -l Release
            git status

      - run:
          name: Update Github repo with new SDK version
          command: |
            bash -x ./scripts/commit_and_push_changes.sh $RELEASE_VERSION $CIRCLE_BRANCH

      - run:
          name: Create a pull request on Github for the new release
          command: |
            bash -x ./scripts/create_pull_request_for_release.sh $RELEASE_VERSION $CIRCLE_BRANCH

      - run:
          name: Update public Github repo SpotIM/spotim-ios-sdk-pod with new SDK version
          command: |
            bash -x ./scripts/update_public_pod_repo_with_sdk.sh $RELEASE_VERSION

      - run:
          name: Create a "Github Release" on public Github repo SpotIM/spotim-ios-sdk-pod
          command: |
            bash -x ./scripts/create_new_github_release_via_api.sh $RELEASE_VERSION

  release_tag:
    <<: *ios_config_xcode
    steps:
      - checkout:
          path: ~/project

      - *define_var_release_version

      - run:
          name: start release tag build
          command: |
            echo "Start release tag build $RELEASE_VERSION"
            pwd
            ls -l

      - restore_cache:
          key: bundler_cache_{{ checksum "Gemfile.lock" }}

      - restore_cache:
          key: bundler_cache_tamBiFKNEwk5ZF1vK4zAgATUGFUqItRwE1YYO8v9szM=

      - run:
          name: Bundle Install
          command: |
            bundle config set --local path 'vendor/bundle'
            bundle install
            bundle info fastlane

      - save_cache:
          key: bundler_cache_{{ checksum "Gemfile.lock" }}
          paths:
            - "vendor/bundle"

      - run:
          name: Before Running Fastlane Build Release
          command: |
            git status

      - run:
          name: Run Fastlane Build Release
          command: |
            bundle exec fastlane build_release_sdk version:$RELEASE_VERSION configuration:<< parameters.buildConfig >>

      - run:
          name: After Running Fastlane Release
          command: |
            ls -l Release
            git status

      - run:
          name: Create a tag on public Github repo SpotIM/spotim-ios-sdk-pod
          command: |
            bash -x ./scripts/update_public_pod_repo_with_tag.sh $RELEASE_VERSION << parameters.xcode >>

  release_app_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastlane Release Sample App
          command: |
            bundle exec fastlane release_demo_app version:$RELEASE_VERSION

      - run:
          name: Copy ipa file to folder ipa-build to upload to S3
          command: |
            mkdir ipa-build
            cp OpenWeb-SampleApp.ipa ipa-build

      - aws-s3/sync:
          from: ipa-build
          to: "s3://prod-ow-mobile/iOS/internal-${RELEASE_VERSION}/OpenWeb-SampleApp.ipa"
          arguments: |
            --region $AWS_REGION

      - run:
          name: Copy dsym zip to folder app-dsym to upload to S3
          command: |
            mkdir app-dsym
            cp OpenWeb-SampleApp.app.dSYM.zip app-dsym

      - aws-s3/sync:
          from: app-dsym
          to: "s3://prod-ow-mobile/iOS/internal-${RELEASE_VERSION}/OpenWeb-SampleApp.app.dSYM.zip"
          arguments: |
            --region $AWS_REGION

  release_beta_app_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastlane Release Sample App
          command: |
            bundle exec fastlane release_beta_demo_app version:$RELEASE_VERSION

      - run:
          name: Copy ipa file to folder ipa-build
          command: |
            mkdir ipa-build
            cp OpenWeb-SampleApp.ipa ipa-build

      - aws-s3/sync:
          from: ipa-build
          to: "s3://prod-ow-mobile/iOS/beta-${RELEASE_VERSION}/OpenWeb-SampleApp.ipa"
          arguments: |
            --region $AWS_REGION

      - run:
          name: Copy dsym zip to folder app-dsym to upload to S3
          command: |
            mkdir app-dsym
            cp OpenWeb-SampleApp.app.dSYM.zip app-dsym

      - aws-s3/sync:
          from: app-dsym
          to: "s3://prod-ow-mobile/iOS/beta-${RELEASE_VERSION}/OpenWeb-SampleApp.app.dSYM.zip"
          arguments: |
            --region $AWS_REGION

  release_public_app_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastlane Release Sample App
          command: |
            bundle exec fastlane release_public_demo_app version:$RELEASE_VERSION

      - run:
          name: Copy ipa file to folder ipa-build
          command: |
            mkdir ipa-build
            cp OpenWeb-SampleApp.ipa ipa-build

      - aws-s3/sync:
          from: ipa-build
          to: "s3://prod-ow-mobile/iOS/public-${RELEASE_VERSION}/OpenWeb-SampleApp.ipa"
          arguments: |
            --region $AWS_REGION

      - run:
          name: Copy dsym zip to folder app-dsym to upload to S3
          command: |
            mkdir app-dsym
            cp OpenWeb-SampleApp.app.dSYM.zip app-dsym

      - aws-s3/sync:
          from: app-dsym
          to: "s3://prod-ow-mobile/iOS/public-${RELEASE_VERSION}/OpenWeb-SampleApp.app.dSYM.zip"
          arguments: |
            --region $AWS_REGION

  upload_app_build_to_s3_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastline build .app file
          command: |
            bundle exec fastlane build_development_app

      - aws-s3/sync:
          from: simulator_build/*/Products/Applications/OpenWeb-SampleApp.app
          to: "s3://prod-ow-mobile/iOS/internal-${RELEASE_VERSION}/OpenWeb-SampleApp.app"
          arguments: |
            --region $AWS_REGION \
            --content-encoding "app"

  upload_app_ipa_to_s3_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastline build .ipa file
          command: |
            bundle exec fastlane build_release_ipa

      - run:
          name: Copy ipa file to folder ipa-build
          command: |
            mkdir ipa-build
            cp OpenWeb-SampleApp.ipa ipa-build

      - aws-s3/sync:
          from: ipa-build
          to: "s3://prod-ow-mobile/iOS/internal-${RELEASE_VERSION}/OpenWeb-SampleApp.ipa"
          arguments: |
            --region $AWS_REGION

      - run:
          name: Copy dsym zip to folder app-dsym to upload to S3
          command: |
            mkdir app-dsym
            cp OpenWeb-SampleApp.app.dSYM.zip app-dsym

      - aws-s3/sync:
          from: app-dsym
          to: "s3://prod-ow-mobile/iOS/internal-${RELEASE_VERSION}/OpenWeb-SampleApp.app.dSYM.zip"
          arguments: |
            --region $AWS_REGION

  upload_beta_app_build_to_s3_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastline build .app file
          command: |
            bundle exec fastlane build_development_app app:beta

      - aws-s3/sync:
          from: simulator_build/*/Products/Applications/OpenWeb-SampleApp.app
          to: "s3://prod-ow-mobile/iOS/beta-${RELEASE_VERSION}/OpenWeb-SampleApp.app"
          arguments: |
            --region $AWS_REGION \
            --content-encoding "app"

  upload_beta_app_ipa_to_s3_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastline build .ipa file
          command: |
            bundle exec fastlane build_release_ipa app:beta

      - run:
          name: Copy ipa file to folder ipa-build
          command: |
            mkdir ipa-build
            cp OpenWeb-SampleApp.ipa ipa-build

      - aws-s3/sync:
          from: ipa-build
          to: "s3://prod-ow-mobile/iOS/beta-${RELEASE_VERSION}/OpenWeb-SampleApp.ipa"
          arguments: |
            --region $AWS_REGION

      - run:
          name: Copy dsym zip to folder app-dsym to upload to S3
          command: |
            mkdir app-dsym
            cp OpenWeb-SampleApp.app.dSYM.zip app-dsym

      - aws-s3/sync:
          from: app-dsym
          to: "s3://prod-ow-mobile/iOS/beta-${RELEASE_VERSION}/OpenWeb-SampleApp.app.dSYM.zip"
          arguments: |
            --region $AWS_REGION

  upload_public_app_build_to_s3_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastline build .app file
          command: |
            bundle exec fastlane build_development_app app:public

      - aws-s3/sync:
          from: simulator_build/*/Products/Applications/OpenWeb-SampleApp.app
          to: "s3://prod-ow-mobile/iOS/public-${RELEASE_VERSION}/OpenWeb-SampleApp.app"
          arguments: |
            --region $AWS_REGION \
            --content-encoding "app"

  upload_public_app_ipa_to_s3_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - run:
          name: Run Fastline build .ipa file
          command: |
            bundle exec fastlane build_release_ipa app:public

      - run:
          name: Copy ipa file to folder ipa-build
          command: |
            mkdir ipa-build
            cp OpenWeb-SampleApp.ipa ipa-build

      - aws-s3/sync:
          from: ipa-build
          to: "s3://prod-ow-mobile/iOS/public-${RELEASE_VERSION}/OpenWeb-SampleApp.ipa"
          arguments: |
            --region $AWS_REGION

      - run:
          name: Copy dsym zip to folder app-dsym to upload to S3
          command: |
            mkdir app-dsym
            cp OpenWeb-SampleApp.app.dSYM.zip app-dsym

      - aws-s3/sync:
          from: app-dsym
          to: "s3://prod-ow-mobile/iOS/public-${RELEASE_VERSION}/OpenWeb-SampleApp.app.dSYM.zip"
          arguments: |
            --region $AWS_REGION

  upload_nightly_app_build_to_s3_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - *define_var_s3_upload_path

      - run:
          name: Run Fastline build .app file
          command: |
            bundle exec fastlane build_development_app app:beta

      - aws-s3/sync:
          from: simulator_build/*/Products/Applications/OpenWeb-SampleApp.app
          to: "s3://prod-ow-mobile/iOS/${S3_UPLOAD_PATH}/OpenWeb-SampleApp.app"
          arguments: |
            --region $AWS_REGION \
            --content-encoding "app"

  upload_nightly_app_ipa_to_s3_job:
    <<: *ios_config_xcode
    steps:
      - prepare_release_app

      - *define_var_s3_upload_path

      - run:
          name: Run Fastline build .ipa file
          command: |
            bundle exec fastlane build_release_ipa app:beta

      - run:
          name: Copy ipa file to folder ipa-build
          command: |
            mkdir ipa-build
            cp OpenWeb-SampleApp.ipa ipa-build

      - aws-s3/sync:
          from: ipa-build
          to: "s3://prod-ow-mobile/iOS/${S3_UPLOAD_PATH}/OpenWeb-SampleApp.ipa"
          arguments: |
            --region $AWS_REGION

      - run:
          name: Copy dsym zip to folder app-dsym to upload to S3
          command: |
            mkdir app-dsym
            cp OpenWeb-SampleApp.app.dSYM.zip app-dsym

      - aws-s3/sync:
          from: app-dsym
          to: "s3://prod-ow-mobile/iOS/${S3_UPLOAD_PATH}/OpenWeb-SampleApp.app.dSYM.zip"
          arguments: |
            --region $AWS_REGION

workflows:
  run-nightly-s3_workflow:
    when: << pipeline.parameters.run-nightly-s3 >>
    jobs:
      - run-nightly-s3_job:
          xcode: *xcode_latest_official_version

  independent_job_workflow:
    when: # All must be true to trigger
      and:
        - equal: [ false, <<pipeline.parameters.run-nightly-s3>> ]
    jobs:
      - default_job:
          filters:
            branches:
              ignore:
                - /^release/.*/
                - /^validate/.*/
                - /^upload_s3/.*/
          xcode: *xcode_latest_official_version

      - release_sdk_job:
          filters:
            branches:
              only:
                - /^release/sdk/.*/
          xcode: *xcode_latest_official_version

      - release_tag:
          filters:
            branches:
              only:
                - /^release/tag14.3.1/.*/
          xcode: "14.3.1"

      - release_tag:
          filters:
            branches:
              only:
                - /^release/tag15.0/.*/
          xcode: "15.0"

      - release_tag:
          filters:
            branches:
              only:
                - /^release/tag15.1/.*/
          xcode: "15.1"

      - release_sdk_job:
          filters:
            branches:
              only:
                - /^release/beta_sdk/.*/
          xcode: *xcode_latest_official_version
          buildConfig: "ReleaseBeta"

      - release_tag:
          filters:
            branches:
              only:
                - /^release/beta_tag14.3.1/.*/
          xcode: "14.3.1"
          buildConfig: "ReleaseBeta"

      - release_tag:
          filters:
            branches:
              only:
                - /^release/beta_tag15.0/.*/
          xcode: "15.0"
          buildConfig: "ReleaseBeta"

      - release_tag:
          filters:
            branches:
              only:
                - /^release/beta_tag15.1/.*/
          xcode: "15.1"
          buildConfig: "ReleaseBeta"

      - release_app_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^release/app/.*/
          xcode: *xcode_latest_official_version

      - release_beta_app_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^release/beta_app/.*/
          xcode: *xcode_latest_official_version

      - release_public_app_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^release/public_app/.*/
          xcode: *xcode_latest_official_version

      - upload_app_build_to_s3_job:
          context: mobile-automation
          requires:
            - "release_app_job"
          xcode: *xcode_latest_official_version

      - upload_beta_app_build_to_s3_job:
          context: mobile-automation
          requires:
            - "release_beta_app_job"
          xcode: *xcode_latest_official_version

      - upload_public_app_build_to_s3_job:
          context: mobile-automation
          requires:
            - "release_public_app_job"
          xcode: *xcode_latest_official_version

  release_multi_workflow:
    jobs:
      - release_sdk_job:
          filters:
            branches:
              only:
                - /^release/multi/.*/
          xcode: *xcode_latest_official_version

      - release_tag:
          requires:
            - "release_sdk_job"
          xcode: "15.0.0"

      - release_tag:
          requires:
            - "release_sdk_job"
          xcode: "14.3.1"

      - release_tag:
          requires:
            - "release_sdk_job"
          xcode: "15.1.0"

  upload_app_to_s3_workflow:
    jobs:
      - upload_app_build_to_s3_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^upload_s3/app/.*/
          xcode: *xcode_latest_official_version

      - upload_app_ipa_to_s3_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^upload_s3/app/.*/
          xcode: *xcode_latest_official_version

  upload_beta_app_to_s3_workflow:
    jobs:
      - upload_beta_app_build_to_s3_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^upload_s3/beta_app/.*/
          xcode: *xcode_latest_official_version

      - upload_beta_app_ipa_to_s3_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^upload_s3/beta_app/.*/
          xcode: *xcode_latest_official_version

  upload_public_app_to_s3_workflow:
    jobs:
      - upload_public_app_build_to_s3_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^upload_s3/public_app/.*/
          xcode: *xcode_latest_official_version

      - upload_public_app_ipa_to_s3_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^upload_s3/public_app/.*/
          xcode: *xcode_latest_official_version

  upload_nightly_app_to_s3_workflow:
    jobs:
      - upload_nightly_app_build_to_s3_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^upload_s3/nightly/.*/
          xcode: *xcode_latest_official_version

      - upload_nightly_app_ipa_to_s3_job:
          context: mobile-automation
          filters:
            branches:
              only:
                - /^upload_s3/nightly/.*/
          xcode: *xcode_latest_official_version

  validate_workflow:
    jobs:
      - validate_cocoapods_job:
          filters:
            branches:
              only:
                - /^validate/cocoapods/sdk/.*/
          xcode: *xcode_latest_official_version

      - validate_spm_job:
          filters:
            branches:
              only:
                - /^validate/spm/sdk/.*/
          xcode: *xcode_latest_official_version
